// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	rabbitmq "github.com/wagslane/go-rabbitmq"
)

// PublisherInterface is an autogenerated mock type for the PublisherInterface type
type PublisherInterface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *PublisherInterface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyPublish provides a mock function with given fields:
func (_m *PublisherInterface) NotifyPublish() <-chan rabbitmq.Confirmation {
	ret := _m.Called()

	var r0 <-chan rabbitmq.Confirmation
	if rf, ok := ret.Get(0).(func() <-chan rabbitmq.Confirmation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan rabbitmq.Confirmation)
		}
	}

	return r0
}

// NotifyReturn provides a mock function with given fields:
func (_m *PublisherInterface) NotifyReturn() <-chan rabbitmq.Return {
	ret := _m.Called()

	var r0 <-chan rabbitmq.Return
	if rf, ok := ret.Get(0).(func() <-chan rabbitmq.Return); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan rabbitmq.Return)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: data, routingKeys, optionFuncs
func (_m *PublisherInterface) Publish(data []byte, routingKeys []string, optionFuncs ...func(*rabbitmq.PublishOptions)) error {
	_va := make([]interface{}, len(optionFuncs))
	for _i := range optionFuncs {
		_va[_i] = optionFuncs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, data, routingKeys)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []string, ...func(*rabbitmq.PublishOptions)) error); ok {
		r0 = rf(data, routingKeys, optionFuncs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
