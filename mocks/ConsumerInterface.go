// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	rabbitmq "github.com/wagslane/go-rabbitmq"

	testing "testing"
)

// ConsumerInterface is an autogenerated mock type for the ConsumerInterface type
type ConsumerInterface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ConsumerInterface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartConsuming provides a mock function with given fields: handler, queue, routingKeys, optionFuncs
func (_m *ConsumerInterface) StartConsuming(handler rabbitmq.Handler, queue string, routingKeys []string, optionFuncs ...func(*rabbitmq.ConsumeOptions)) error {
	_va := make([]interface{}, len(optionFuncs))
	for _i := range optionFuncs {
		_va[_i] = optionFuncs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handler, queue, routingKeys)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(rabbitmq.Handler, string, []string, ...func(*rabbitmq.ConsumeOptions)) error); ok {
		r0 = rf(handler, queue, routingKeys, optionFuncs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsumerInterface creates a new instance of ConsumerInterface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumerInterface(t testing.TB) *ConsumerInterface {
	mock := &ConsumerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
